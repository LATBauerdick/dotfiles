" Type :so % to refresh .vimrc after making changes

" Set standard file encoding
set encoding=utf8
" No special per file vim override configs
set nomodeline
" Stop word wrapping
set nowrap
  " Except... on Markdown. That's good stuff.
  autocmd FileType markdown setlocal wrap
" Adjust system undo levels
set undolevels=100
" Use system clipboard
set clipboard=unnamed
" Set tab width and convert tabs to spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set expandtab
" Don't let Vim hide characters or make loud dings
set conceallevel=1
set noerrorbells
" Number gutter
set number
set numberwidth=5
" Use search highlighting
set hlsearch
"
" Setting Arrow Keys to Resize Panes
nnoremap <Left> :vertical resize -1<CR>
nnoremap <Right> :vertical resize +1<CR>
nnoremap <Up> :resize -1<CR>
nnoremap <Down> :resize +1<CR>
" Disable arrow keys completely in Insert Mode
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>
" Return to the last file opened
nmap <Leader><Leader> <c-^>

" plugns {{{
" if empty(glob('~/.nvim/autoload/plug.vim'))
"   silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"   autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
" endif

set nocompatible
filetype plugin indent on

packadd minpac
call minpac#init()
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

"let $NVIM_TUI_ENABLE_TRUE_COLOR=1

call minpac#add('k-takata/minpac', {'type': 'opt'})

" Support bundles
call minpac#add('Shougo/unite.vim')
call minpac#add('jgdavey/tslime.vim')
call minpac#add('Shougo/vimproc.vim')
call minpac#add('ervandew/supertab')
call minpac#add('neomake/neomake')
call minpac#add('moll/vim-bbye')
call minpac#add('nathanaelkane/vim-indent-guides')
call minpac#add('vim-scripts/gitignore')
call minpac#add('junegunn/fzf')
call minpac#add('tpope/vim-dispatch')
call minpac#add('radenling/vim-dispatch-neovim')

" Git
call minpac#add('tpope/vim-fugitive')
call minpac#add('int3/vim-extradite')

" Bars, panels, and files
" call minpac#add('scrooloose/nerdtree')
call minpac#add('bling/vim-airline')
call minpac#add('ctrlpvim/ctrlp.vim')
call minpac#add('majutsushi/tagbar')

" Text manipulation
call minpac#add('vim-scripts/Align')
call minpac#add('simnalamburt/vim-mundo')
call minpac#add('tpope/vim-commentary')
call minpac#add('godlygeek/tabular')
call minpac#add('michaeljsmith/vim-indent-object')
call minpac#add('easymotion/vim-easymotion')

" Allow pane movement to jump out of vim into tmux
" call minpac#add( 'christoomey/vim-tmux-navigator')

" Haskell
call minpac#add('neovimhaskell/haskell-vim', {'for': 'haskell'})
call minpac#add('enomsg/vim-haskellConcealPlus', {'for': 'haskell'})
" call minpac#add('eagletmt/ghcmod-vim', {'for': 'haskell'})
" call minpac#add('eagletmt/neco-ghc', {'for': 'haskell'})
" call minpac#add('Twinside/vim-hoogle', {'for': 'haskell'})
" call minpac#add('mpickering/hlint-refactor-vim', {'for': 'haskell'})
call minpac#add('parsonsmatt/intero-neovim', {'for': 'haskell'})

" call minpac#add('scrooloose/syntastic')
call minpac#add('scrooloose/nerdcommenter')
call minpac#add('shougo/neocomplete.vim')


" PureScript
call minpac#add('raichoo/purescript-vim')
call minpac#add('frigoeu/psc-ide-vim')

" Clojure
call minpac#add('tpope/vim-fireplace')

" Custom bundles
" call minpac#add('Yggdroot/indentLine')
call minpac#add('dracula/vim')
call minpac#add('altercation/vim-colors-solarized')
"call minpac#add('frankier/neovim-colors-solarized-truecolor-only')
call minpac#add('rakr/vim-one')
call minpac#add('tpope/vim-vinegar')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('tpope/vim-sexp-mappings-for-regular-people')
call minpac#add('guns/vim-sexp')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-surround')
call minpac#add('vim-airline/vim-airline-themes')
call minpac#add('mvandiemen/ghostbuster')
call minpac#add('airblade/vim-gitgutter')

" }}}


let mapleader = ","
" Allow the normal use of "," by pressing it twice
" noremap ,, ,
let maplocalleader = "\\"

" Use par for prettier line formatting
set formatprg=par
let $PARINIT = 'rTbgqR B=.,?_A_a Q=_s>|'

" Show trailing whitespace
set list
" But only interesting whitespace
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif
" set listchars=tab:‚ñ∏\ ,eol:¬¨

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" indentline settings
" let g:indentLine_enabled = 1
" let g:indentLine_char = "‚ü©"

" syntastic beginners settings
" dont do this for airline
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

map <silent> tw :GhcModTypeInsert<CR>
map <silent> ts :GhcModSplitFunCase<CR>
map <silent> tq :GhcModType<CR>
map <silent> te :GhcModTypeClear<CR>

" call neomake#configure#automake('rw', 1000)
let g:neomake_place_signs=1
" let g:neomake_error_sign = {
"         \ 'text': 'E>',
"         \ 'texthl': 'ErrorMsg',
"         \ }
let g:neomake_warning_sign = {
        \ 'text': 'W>',
        \ 'texthl': 'WarningMsg',
        \ }

" VSplit window
nnoremap <leader>s <C-w>v<C-w>l
nnoremap <leader>2 :vsplit<CR>
nnoremap <leader>1 :only<CR>
" go to the other window
nnoremap <leader>w <C-w><C-w>
nnoremap <leader>o <C-w><C-w>

noremap ; :

" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Ack command
nnoremap <leader>a :Ack
let g:ackprg = 'ag --vimgrep'

" quickly edit .vimrc file
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" -- vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 2
" let g:airline#extensions#tabline#fnamemod = ':t'
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline#extensions#tabline#right_sep = ' '
" let g:airline#extensions#tabline#right_alt_sep = '|'
" let g:airline_left_sep = ' '
" let g:airline_left_alt_sep = '|'
" let g:airline_right_sep = ' '
" let g:airline_right_alt_sep = '|'

" easy expansion of the Active File Directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" -- solarized color scheme
"let g:solarized_termcolors=256
"let g:solarized_termcolors = 16
"let g:solarized_termtrans = 1
"let g:solarized_visibility = "high"
"let g:solarized_contrast = "high"
"set termguicolors
"set background=dark
set background=light
colorscheme solarized
let g:one_allow_italics = 1 " italic for comments
"let g:airline_theme='base16_solarized'
"let g:airline_theme='one'

" for haskellConcealPlus disable double-stroke capitals (does not work on iPad)
let hscoptions="ùêåùêÑùêìùêíEsiBQZDC"

set showcmd       " display incomplete command
set autowrite     " Automatically :write before running commands
set autoread      " Reload files changed outside vim
" Trigger autoread when changing buffers or coming back to vim in terminal.
au FocusGained,BufEnter * :silent! !

" close buffer without closing window
map <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>

"Set default font in mac vim and gvim
" set guifont=Hack:h14
set linespace=4
set cursorline    " highlight the current line
set visualbell    " stop that ANNOYING beeping

" Allow usage of mouse in iTerm
set ttyfast
set mouse=a

set gdefault      " Never have to type /g at the end of search / replace again
set ignorecase    " case insensitive searching (unless specified)
set smartcase
set incsearch
set showmatch
" Disable highlight when <leader><cr> is pressed
" but preserve cursor coloring
nmap <silent> <leader><cr> :noh\|hi Cursor guibg=red<cr>

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Display extra whitespace
set list listchars=tab:¬ª¬∑,trail:¬∑,nbsp:¬∑

" Make it obvious where 80 characters is
set textwidth=80
" set formatoptions=cq
set formatoptions=qrn1
set wrapmargin=0
set colorcolumn=+1
set linebreak

" define Wrap command to set text soft wrapping
command! -nargs=* Wrap set wrap linebreak nolist

"Toggle relative numbering, and set to absolute on loss of focus or insert mode
set rnu
function! ToggleNumbersOn()
    set nu!
    set rnu
endfunction
function! ToggleRelativeOn()
    set rnu!
    set nu
endfunction
autocmd FocusLost * call ToggleRelativeOn()
autocmd FocusGained * call ToggleRelativeOn()
autocmd InsertEnter * call ToggleRelativeOn()
autocmd InsertLeave * call ToggleRelativeOn()


" Open new split panes to right and bottom, which feels more natural
" set splitbelow
set splitright

" Auto resize Vim splits to active split
" set winwidth=104
" set winheight=5
" set winminheight=5
" set winheight=999

" ================ Scrolling ========================

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" Use tab to jump between blocks, because it's easier
nnoremap <tab> %
vnoremap <tab> %

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Always use vertical diffs
set diffopt+=vertical

" NERDtree
map <C-n> :NERDTreeToggle<CR>

" Fuzzy find files
nnoremap <silent> <Leader><space> :CtrlP<CR>
let g:ctrlp_max_files=0
let g:ctrlp_show_hidden=1
let g:ctrlp_custom_ignore = { 'dir': '\v[\/](.git|.cabal-sandbox|.stack-work)$' }

nnoremap <C-p> :<C-u>FZF<CR>

" delete buffer without closing pane
noremap <leader>bd :Bd<cr>


syntax on

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Ag will search from project root
let g:ag_working_path_mode="r"

" Quickly close windows
nnoremap <leader>x :x<cr>
nnoremap <leader>X :q!<cr>

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>_ :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>


" resize panes
" nnoremap <silent> <Right> :vertical resize +5<cr>
" nnoremap <silent> <Left> :vertical resize -5<cr>
" nnoremap <silent> <Up> :resize +5<cr>
" nnoremap <silent> <Down> :resize -5<cr>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" use cursor keys to move display lines
nmap <up> gk
nmap <down> gj
inoremap <Up> <C-o>gk
inoremap <Down> <C-o>gj
nnoremap <Up> gk
nnoremap <Down> gj

" AUTOCOMMANDS - Do stuff

" Save whenever switching windows or leaving vim. This is useful when running
" the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! wa

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

"update dir to current file
autocmd BufEnter * silent! cd %:p:h

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

"augroup END

set foldmethod=marker

let g:purescript_indent_if = 3
let g:purescript_indent_case = 5
let g:purescript_indent_let = 4
let g:purescript_indent_where = 6
let g:purescript_indent_do = 3

let g:psc_ide_syntastic_mode = 1
au FileType purescript nmap <leader>t :PSCIDEtype<CR>
au FileType purescript nmap <leader>s :PSCIDEapplySuggestion<CR>
au FileType purescript nmap <leader>a :PSCIDEaddTypeAnnotation<CR>
au FileType purescript nmap <leader>i :PSCIDEimportIdentifier<CR>
au FileType purescript nmap <leader>r :PSCIDEload<CR>
au FileType purescript nmap <leader>p :PSCIDEpursuit<CR>
au FileType purescript nmap <leader>c :PSCIDEcaseSplit<CR>
au FileType purescript nmap <leader>qd :PSCIDEremoveImportQualifications<CR>
au FileType purescript nmap <leader>qa :PSCIDEaddImportQualifications<CR>

augroup interoMaps
  au!
  " Maps for intero. Restrict to Haskell buffers so the bindings don't collide.

  " Background process and window management
  au FileType haskell nnoremap <silent> <leader>is :InteroStart<CR>
  au FileType haskell nnoremap <silent> <leader>ik :InteroKill<CR>

  " Open intero/GHCi split horizontally
  au FileType haskell nnoremap <silent> <leader>io :InteroOpen<CR>
  " Open intero/GHCi split vertically
  au FileType haskell nnoremap <silent> <leader>iov :InteroOpen<CR><C-W>H
  au FileType haskell nnoremap <silent> <leader>ih :InteroHide<CR>

  " Reloading (pick one)
  " Automatically reload on save
  au BufWritePost *.hs InteroReload
  " Manually save and reload
  " au FileType haskell nnoremap <silent> <leader>wr :w \| :InteroReload<CR>

  " Load individual modules
  au FileType haskell nnoremap <silent> <leader>il :InteroLoadCurrentModule<CR>
  au FileType haskell nnoremap <silent> <leader>if :InteroLoadCurrentFile<CR>

  " Type-related information
  " Heads up! These next two differ from the rest.
  au FileType haskell map <silent> <leader>t <Plug>InteroGenericType
  au FileType haskell map <silent> <leader>T <Plug>InteroType
  au FileType haskell nnoremap <silent> <leader>it :InteroTypeInsert<CR>

  " Navigation
  au FileType haskell nnoremap <silent> <leader>jd :InteroGoToDef<CR>

  " Managing targets
  " Prompts you to enter targets (no silent):
  au FileType haskell nnoremap <leader>ist :InteroSetTargets<SPACE>
augroup END

" Intero starts automatically. Set this if you'd like to prevent that.
let g:intero_start_immediately = 1

